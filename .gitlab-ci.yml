include:
  project: 'Production-mutualisee/IPS/IDO/gitlab-cicd/pipelines'
  file: 'gitlab-ci.yml'

image: $CI_REGISTRY/cloudtools:1.2.3

variables:
  VAULT_ADDR: "https://hvault.staging.echonet"
  VAULT_NAMESPACE: "AP26482"
  VAULT_AUTH_NAME: "promote-docker-image-58376"
  VAULT_ROLE: "promote-docker-image"
  TF_ROOT: $(CI_PROJECT_DIR)
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/terraform
  ALLOW_REPLACE_ON_APPLY: "true"
  IBM_ACCOUNT_ID: "ac0021000263"
  REALM_ID: "r10021000090"
  ARTIFACTORY_URL: "https://repo.artifactory-dogen.group.echonet"
  ARTIFACTORY_USER: $ARTIFACTORY_USER
  ARTIFACTORY_PASSWORD: $ARTIFACTORY_PASSWORD
  HTTPS_PROXY: "http://bizproxy.fr.net.intra:3131"
  NO_PROXY: "*.int.staging-echonet"

cache:
  key: "${TF_ROOT}"
  paths:
    - $(TF_ROOT)/.terraform/

.prepare_env: &prepare_env
  before_script:
    - export IBM_CLOUD_API_KEY="$(cat credentials.env | grep IBM_CLOUD_API_KEY | cut -d '=' -f2)"
    - export HTTPS_PROXY=$HTTPS_PROXY
    - export NO_PROXY=$NO_PROXY
    - jfrog config add --interactive=false --url $ARTIFACTORY_URL --user $ARTIFACTORY_USER --password $ARTIFACTORY_PASSWORD
    - jfrog config show
    - TOKEN_JF=$(jfrog rt access-token-create | jq -r ".access_token")
    - |
      cat <<EOF > $HOME/.terraform.d/credentials.tfrc.json
      {
        "credentials": {
          "repo.artifactory-dogen-group.echonet": {
            "token": "${TOKEN_JF}"
          }
        }
      }
      EOF
    - |
      cat <<EOF > $HOME/.terraformrc
      provider_installation {
        direct {
          exclude = ["registry.terraform.io/*/*"]
        }
        network_mirror {
          url = "$ARTIFACTORY_URL/api/terraform/terraform-providers/providers"
        }
      }
      EOF

stages:
  - login
  - extract
  - global
  - trigger

login-job:
  stage: login
  allow_failure: false
  tags:
    - "ocp_l"
  script:
    - export VAULT_TOKEN="$(vault write -field=token auth/$VAULT_AUTH_NAME role=$VAULT_ROLE jwt=$CI_JOB_JWT)"
    - echo "IBM_CLOUD_API_KEY=$(vault read -field=api_key ibm_${IBM_ACCOUNT_ID}/creds/${REALM_ID}_buhub )"

  artifacts:
    expire_in: 120s
    paths:
      - credentials.env

generate-child-pipeline:
  stage: extract
  tags:
    - "ocp_l"
  allow_failure: false
  <<: *prepare_env
  script:
    - |
      terraform init -reconfigure \
        -backend-config="username=gitlab-ci-token" \
        -backend-config="password=${CI_JOB_TOKEN}" \
        -backend-config="address=${TF_ADDRESS}" \
        -backend-config="lock_address=${TF_ADDRESS}/lock" \
        -backend-config="unlock_address=${TF_ADDRESS}/lock" \
        -backend-config="lock_method=POST" \
        -backend-config="unlock_method=DELETE" \
        -backend-config="retry_wait_min=5"
    - terraform plan
    - terraform state list > resources.txt
    - cat resources.txt
    - |
      cat <<EOF > custom.yml
      image: $CI_REGISTRY/cloudtools:1.2.3

      variables:
        VAULT_ADDR: "https://hvault.staging.echonet"
        VAULT_NAMESPACE: "AP26482"
        VAULT_AUTH_NAME: "promote-docker-image-58376"
        VAULT_ROLE: "promote-docker-image"
        TF_ROOT: $(CI_PROJECT_DIR)
        TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/terraform
        ALLOW_REPLACE_ON_APPLY: "true"
        IBM_ACCOUNT_ID: "ac0021000263"
        REALM_ID: "r10021000090"
        stages:
          - login
          - taint
          - untaint
          - refresh-ressource
          - apply-ressource

      .prepare_env: &prepare_env
        before_script:
          - export IBM_CLOUD_API_KEY="$(cat credentials.env | grep IBM_CLOUD_API_KEY | cut -d '=' -f2)"
          - export HTTPS_PROXY=$HTTPS_PROXY
          - export NO_PROXY=$NO_PROXY
          - mkdir -p $HOME/.terraform.d
          - jfrog config add --interactive=false --url $ARTIFACTORY_URL --user $ARTIFACTORY_USER --password $ARTIFACTORY_PASSWORD
          - TOKEN_JFROG=$(jfrog rt access-token-create | jq -r ".access_token")
          - |
            cat <<EOF > $HOME/.terraform.d/credentials.tfrc.json
            {
              "credentials": {
                "repo.artifactory-dogen-group.echonet": {
                  "token": "${TOKEN_JFROG}"
                }
              }
            }
            EOF
          - |
            cat <<EOF > $HOME/.terraformrc
            provider_installation {
              direct {
                exclude = ["registry.terraform.io/*/*"]
              }
              network_mirror {
                url = "$ARTIFACTORY_URL/api/terraform/terraform-providers/providers"
              }
            }
            EOF
      login-job:
        stage: login
        allow_failure: false
        tags:
          - "ocp_l"
        script:
          - export VAULT_TOKEN="$(vault write -field=token auth/$VAULT_AUTH_NAME role=$VAULT_ROLE jwt=$CI_JOB_JWT)"
          - echo "IBM_CLOUD_API_KEY=$(vault read -field=api_key ibm_${IBM_ACCOUNT_ID}/creds/${REALM_ID}_buhub )" > credentials.env
        artifacts:
          expire_in: 120s
          paths:
            - credentials.env
      EOF
      - |
        while IFS= read -r line; do
          ressource_clean=$(echo "ressource" | awk -F "_" '{print $3"_"$4}' | awk -F "\\.this\\[|\\]" '{print $1"_"$2}' | tr -d '"' | tr -d '.')
          cat <<EOF > $custom.yml
        taint-${ressource_clean}:
          stage: taint
          tags:
            - "ocp_l"
          when: manual
          <<: *prepare_env
          script:
            - terraform init -reconfigure -backend-config="username=gitlab-ci-token" -backend-config="password=${CI_JOB_TOKEN}" -backend-config="address=${TF_ADDRESS}" -backend-config="lock_address=${TF_ADDRESS}/lock" -backend-config="unlock_address=${TF_ADDRESS}/lock" -backend-config="lock_method=POST" -backend-config="unlock_method=DELETE" -backend-config="retry_wait_min=5"
            - terraform taint '${ressource}'
          environment:
            name: dev
        untaint-${ressource_clean}:
          stage: untaint
          tags:
            - "ocp_l"
          when: manual
          <<: *prepare_env
          script:
            - terraform init -reconfigure -backend-config="username=gitlab-ci-token" -backend-config="password=${CI_JOB_TOKEN}" -backend-config="address=${TF_ADDRESS}" -backend-config="lock_address=${TF_ADDRESS}/lock" -backend-config="unlock_address=${TF_ADDRESS}/lock" -backend-config="lock_method=POST" -backend-config="unlock_method=DELETE" -backend-config="retry_wait_min=5"
            - terraform apply -refresh-only -auto-approve -target='${ressource}'
          environment:
            name: dev
        EOF
        done < resources.txt
      - cat $custom.yml
    artifacts:
      paths:
        - $custom.yml

terraform-refresh:
  stage: global
  tags:
    - "ocp_l"
  <<: *prepare_env
  script:
    - |
      terraform init -reconfigure \
        -backend-config="username=gitlab-ci-token" \
        -backend-config="password=${CI_JOB_TOKEN}" \
        -backend-config="address=${TF_ADDRESS}" \
        -backend-config="lock_address=${TF_ADDRESS}/lock" \
        -backend-config="unlock_address=${TF_ADDRESS}/lock" \
        -backend-config="lock_method=POST" \
        -backend-config="unlock_method=DELETE" \
        -backend-config="retry_wait_min=5"
    - terraform refresh
    - terraform plan
  environment:
    name: dev

terraform-destroy:
  stage: global
  tags:
    - "ocp_l"
  <<: *prepare_env
  script:
    - |
      terraform init -reconfigure \
        -backend-config="username=gitlab-ci-token" \
        -backend-config="password=${CI_JOB_TOKEN}" \
        -backend-config="address=${TF_ADDRESS}" \
        -backend-config="lock
